version: '3.8'

services:
  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.10.1
    container_name: rag_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    networks:
      - rag_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=6333"
      - "prometheus.io/path=/metrics"

  # LLM and Embeddings
  ollama:
    image: ollama/ollama:latest
    container_name: rag_ollama
    ports:
      - "11434:11434"
    volumes:
      - ./ollama_models:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - rag_network

  # Queue System
  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - rag_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: rag_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - rag_network

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rag_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    restart: unless-stopped
    networks:
      - rag_network
    depends_on:
      - prometheus

  # LightRAG API Service
  lightrag-api:
    build: .
    container_name: rag_api
    ports:
      - "8000:8000"
    environment:
      - RAG_LLM_HOST=http://ollama:11434
      - RAG_QDRANT_HOST=http://qdrant:6333
      - RAG_REDIS_HOST=redis://redis:6379
      - RAG_PROMETHEUS_HOST=http://prometheus:9090
      - RAG_LOG_LEVEL=INFO
      - RAG_API_KEY_ENABLED=false  # Set to true in production
    volumes:
      - ./rag_data:/app/rag_data
      - ./logs:/app/logs
    depends_on:
      - ollama
      - qdrant
      - redis
      - prometheus
    restart: unless-stopped
    networks:
      - rag_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8000"
      - "prometheus.io/path=/metrics"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NGINX API Gateway
  nginx:
    image: nginx:alpine
    container_name: rag_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/conf.d:/etc/nginx/conf.d
    restart: unless-stopped
    networks:
      - rag_network
    depends_on:
      - lightrag-api

networks:
  rag_network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data: